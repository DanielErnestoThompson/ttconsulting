!function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports._vantaEffect = e() : t._vantaEffect = e()
}("undefined" != typeof self ? self : this, ( () => ( () => {
    "use strict";
    var t = {
        d: (e, i) => {
            for (var s in i)
                t.o(i, s) && !t.o(e, s) && Object.defineProperty(e, s, {
                    enumerable: !0,
                    get: i[s]
                })
        }
        ,
        o: (t, e) => Object.prototype.hasOwnProperty.call(t, e),
        r: t => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            }),
            Object.defineProperty(t, "__esModule", {
                value: !0
            })
        }
    }
      , e = {};
    function i(t, e) {
        return null == t && (t = 0),
        null == e && (e = 1),
        t + Math.random() * (e - t)
    }
    t.r(e),
    t.d(e, {
        default: () => d
    }),
    Number.prototype.clamp = function(t, e) {
        return Math.min(Math.max(this, t), e)
    }
    ;
    function s(t) {
        for (; t.children && t.children.length > 0; )
            s(t.children[0]),
            t.remove(t.children[0]);
        t.geometry && t.geometry.dispose(),
        t.material && (Object.keys(t.material).forEach((e => {
            t.material[e] && null !== t.material[e] && "function" == typeof t.material[e].dispose && t.material[e].dispose()
        }
        )),
        t.material.dispose())
    }
    const o = "object" == typeof window;
    let n = o && window.THREE || {};
    o && !window.VANTA && (window.VANTA = {});
    const r = o && window.VANTA || {};
    r.register = (t, e) => r[t] = t => new e(t),
    r.version = "0.5.24";
    const h = function() {
        return Array.prototype.unshift.call(arguments, "[VANTA]"),
        console.error.apply(this, arguments)
    };
    r.VantaBase = class {
        constructor(t={}) {
            if (!o)
                return !1;
            r.current = this;
            this.restart = this.restart.bind(this);
            this.initThree();
            this.setSize();
            try {
                this.init()
            } catch (t) {
                return h("Init error", t),
                void (this.options.backgroundColor && (console.log("[VANTA] Falling back to backgroundColor"),
                this.el.style.background = this.options.backgroundColor))
            }
            this.resize();
            const a = window.addEventListener;
            a("resize", this.resize),
            window.requestAnimationFrame(this.resize)
        }
        setSize() {
            this.scale || (this.scale = 1),
            this.width = Math.max(this.el.offsetWidth, this.options.minWidth),
            this.height = Math.max(this.el.offsetHeight, this.options.minHeight)
        }
        restart() {
            if (this.scene)
                for (; this.scene.children.length; )
                    this.scene.remove(this.scene.children[0]);
            "function" == typeof this.onRestart && this.onRestart(),
            this.init()
        }
        init() {
            "function" == typeof this.onInit && this.onInit()
        }
        destroy() {
            "function" == typeof this.onDestroy && this.onDestroy();
            window.cancelAnimationFrame(this.req);
            const e = this.scene;
            e && e.children && s(e),
            this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement),
            this.renderer = null,
            this.scene = null),
            r.current === this && (r.current = null)
        }
    }
    ;
    const a = r.VantaBase;
    let l = "object" == typeof window && window.THREE;
    class c extends a {
        static initClass() {
            this.prototype.defaultOptions = {
                color: 16746528,
                color2: 0x2c3e50,
                backgroundColor: 2236962,
                size: 3,
                spacing: 25,
            }
        }
    }
    c.initClass();
    const d = r.register("DOTS", c);
    
    // VANTA.DOTS EFFECT IS COMMENTED OUT BELOW
    /*
    /*
VANTA.DOTS({
  el: "#your-element-id",
  color: 0x16746528,
  backgroundColor: 0x2236962,
  size: 3,
  spacing: 25
});
*/
    
    return e;
}
)()));
